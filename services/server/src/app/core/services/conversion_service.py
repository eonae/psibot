"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤.
"""

import logging
import subprocess
import tempfile
from pathlib import Path

from src.app.core.ports import FileStorage
from src.shared.logging import log_time

logger = logging.getLogger(__name__)


class ConversionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–≤."""

    def __init__(self, storage: FileStorage):
        self.storage = storage

    @log_time
    def convert_to_wav(
        self,
        source_filename: Path,
        target_filename: Path,
    ) -> None:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ WAV (–µ—Å–ª–∏ –æ–Ω —É–∂–µ WAV - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º)

        Args:
            source_filename: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            target_filename: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV —Ñ–∞–π–ª–∞
        """
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ WAV - –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
        if source_filename.suffix.lower() == ".wav":
            logger.info("üìã Source file is already WAV, copying to %s", target_filename)
            self.storage.copy(source_filename, target_filename)
            return

        logger.info("üîÑ Converting %s to WAV...", source_filename)

        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        audio_data = self.storage.read(source_filename)

        ext = source_filename.suffix
        wav = ".wav"

        with (
            tempfile.NamedTemporaryFile(suffix=ext, delete=True) as input_tmp,
            tempfile.NamedTemporaryFile(suffix=wav, delete=True) as output_tmp,
        ):

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_tmp.write(audio_data)
            input_tmp.flush()

            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            cmd = [
                "ffmpeg",
                "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                "-i",
                input_tmp.name,  # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                "-acodec",
                "pcm_s16le",  # –ö–æ–¥–µ–∫ –¥–ª—è WAV
                "-ar",
                "16000",  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                "-ac",
                "1",  # –ú–æ–Ω–æ
                output_tmp.name,  # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            ]

            try:
                subprocess.run(cmd, check=True, capture_output=True, text=True)
            except subprocess.CalledProcessError as e:
                logger.error("FFmpeg error: %s", e.stderr)

                raise RuntimeError(f"Failed to convert audio: {e.stderr}") from e

            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(output_tmp.name, "rb") as f:
                wav_data = f.read()

            self.storage.save(wav_data, target_filename)
            logger.info("‚úÖ Conversion completed: %s", target_filename)
