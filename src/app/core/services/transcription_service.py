import logging
import tempfile
from pathlib import Path

from src.app.adapters.files.singleton import storage
from src.app.core.ports import FileStorage
from src.app.core.ports.ml import SpeechToText

logger = logging.getLogger(__name__)


class TranscriptionService:
    def __init__(self, storage: FileStorage, stt: SpeechToText):
        self.storage = storage
        self.stt = stt

    def transcribe(self, wav_filename: Path, target_filename: Path) -> None:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞

        Args:
        wav_filename: –ü—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É
        target_filename: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        logger.info("üéØ Starting transcription of %s...", wav_filename)

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        audio_data = storage.read(Path(wav_filename))

        with tempfile.NamedTemporaryFile(suffix=".wav", delete=True) as tmp:
            tmp.write(audio_data)
            tmp.flush()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –Ω–∞ –¥–∏—Å–∫

            transcription = self.stt.transcribe(Path(tmp.name))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            storage.save(str(transcription).encode(), Path(target_filename))

            logger.info("‚úÖ Transcription completed: %s", target_filename)
