import asyncio
import logging
from redis.asyncio import Redis  # type: ignore

from lib.celery_reactive import ReactiveResults, Headers
from lib.celery_reactive.test.config import BROKER_URL
from lib.celery_reactive.test.tasks import add

logging.basicConfig(level=logging.DEBUG)

results = ReactiveResults(Redis.from_url(BROKER_URL))


async def main():
    task = add.apply_async(
        args=[1, 2],
        headers={"job_id": "test_job_123"}
    )

    print(f"üöÄ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: {task.id}")

    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –æ—Ç Celery...")

    async def on_add_result(ex: Exception | None, result: int | None, headers: Headers):
        if ex:
            print("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:")
            print(f"ID –∑–∞–¥–∞—á–∏: {headers.get('job_id')}")
            print(f"–û—à–∏–±–∫–∞: {ex}")
        else:
            print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"ID –∑–∞–¥–∞—á–∏: {headers.get('job_id')}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"–•–µ–¥–µ—Ä—ã: {headers}")

    results.subscribe(add.name, on_add_result)
    await results.start()

    # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º Ctrl+C
    try:
        print("\nüëâ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        await asyncio.Event().wait()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        await results.stop()


if __name__ == "__main__":
    asyncio.run(main())
